{"version":3,"sources":["components/Pagination/Pagination.tsx","App.tsx","utils.ts","index.tsx"],"names":["Pagination","total","perPage","onPageChange","totalPages","Math","ceil","useState","currentPage","setCurrentPage","handlePageChange","pageNumber","className","cn","disabled","href","onClick","pageNumbers","i","push","active","renderPageNumbers","items","from","to","numbers","n","getNumbers","map","App","itemsPerPage","setItemsPerPage","indexOfLastItem","indexOfFirstItem","currentItems","slice","onPageInfo","min","length","id","onChange","e","selectedItemsPerPage","parseInt","target","value","option","htmlFor","itemsCount","item","ReactDOM","render","document","getElementById"],"mappings":"oNASaA,EAAwC,SAAC,GAI/C,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,QACAC,EACI,EADJA,aAEMC,EAAaC,KAAKC,KAAKL,EAAQC,GACrC,EAAsCK,mBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAmB,SAACC,GACxBF,EAAeE,GACfR,EAAaQ,EAAYT,IA4B3B,OACE,qBAAIU,UAAU,aAAd,UACE,oBACEA,UAAWC,IAAG,YAAa,CAAEC,SAA0B,IAAhBN,IADzC,SAGE,mBACE,UAAQ,WACRI,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBP,EACfQ,QACkB,IAAhBR,EACI,kBAAM,GACN,kBAAME,EAAiBF,EAAc,IAR7C,oBA9BoB,WAIxB,IAHA,IAAMS,EAAc,GADU,WAIrBC,GACPD,EAAYE,KACV,oBAEEP,UAAWC,IAAG,YAAa,CAAEO,OAAQZ,IAAgBU,IAFvD,SAIE,mBACE,UAAQ,WACRN,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,kBAAMN,EAAiBQ,IAJlC,SAMGA,KATEA,KAHFA,EAAI,EAAGA,GAAKd,EAAYc,IAAM,EAA9BA,GAkBT,OAAOD,EAsBJI,GACD,oBACET,UAAWC,IAAG,YAAa,CAAEC,SAAUN,IAAgBJ,IADzD,SAGE,mBACE,UAAQ,WACRQ,UAAU,YACVG,KAAK,QACL,gBAAeP,IAAgBJ,EAC/BY,QACER,IAAgBJ,EACZ,kBAAM,GACN,kBAAMM,EAAiBF,EAAc,IAR7C,wBCjEFc,ECLC,SAAoBC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQN,KAAKO,GAGf,OAAOD,EDFKE,CAAW,EAAG,IACzBC,KAAI,SAAAF,GAAC,qBAAYA,MAEdxB,EAAU,CAAC,EAAG,EAAG,GAAI,IAEd2B,EAAgB,WAC3B,MAAsCtB,mBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwCF,mBAASL,EAAQ,IAAzD,mBAAO4B,EAAP,KAAqBC,EAArB,KAOMC,EAAkBxB,EAAcsB,EAChCG,EAAmBD,EAAkBF,EACrCI,EAAeZ,EAAMa,MAAMF,EAAkBD,GAE7CI,EAAU,eAAW5B,EAAX,mBAAiCyB,EAAmB,EAApD,cAA2D5B,KAAKgC,IAAIL,EAAiBV,EAAMgB,QAA3F,eAAyGhB,EAAMgB,OAA/G,KAEhB,OACE,sBAAK1B,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,SACGwB,IAGH,sBAAKxB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,wBACE,UAAQ,kBACR2B,GAAG,kBACH3B,UAAU,eACV4B,SAAU,SAACC,GACT,IAAMC,EAAuBC,SAASF,EAAEG,OAAOC,MAAO,IAEtDd,EAAgBW,GAChBjC,EAAe,IAEjBoC,MAAOf,EAVT,SAYG5B,EAAQ0B,KAAI,SAACkB,GAAD,OACX,wBAAqBD,MAAOC,EAA5B,SACGA,GADUA,UAOnB,uBAAOC,QAAQ,kBAAkBnC,UAAU,qBAA3C,+BAKF,cAAC,EAAD,CACEX,MAAOqB,EAAMgB,OACbpC,QAAS4B,EACT3B,aAjDe,WAAqC,IAApCQ,EAAmC,uDAAtB,EAAGqC,EAAmB,uDAAN,EACjDvC,EAAeE,GACfoB,EAAgBiB,MAkDd,6BACGd,EAAaN,KAAI,SAAAqB,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YEnEjBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.1a1a15d6.chunk.js","sourcesContent":["import cn from 'classnames';\nimport React, { useState } from 'react';\n\ninterface PaginationProps {\n  total: number;\n  perPage: number;\n  onPageChange: (pageNumber: number, itemsPerPage: number) => void;\n}\n\nexport const Pagination: React.FC<PaginationProps> = ({\n  total,\n  perPage,\n  onPageChange,\n}) => {\n  const totalPages = Math.ceil(total / perPage);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const handlePageChange = (pageNumber: number) => {\n    setCurrentPage(pageNumber);\n    onPageChange(pageNumber, perPage);\n  };\n\n  const renderPageNumbers = () => {\n    const pageNumbers = [];\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = 1; i <= totalPages; i++) {\n      pageNumbers.push(\n        <li\n          key={i}\n          className={cn('page-item', { active: currentPage === i })}\n        >\n          <a\n            data-cy=\"pageLink\"\n            className=\"page-link\"\n            href={`#${i}`}\n            onClick={() => handlePageChange(i)}\n          >\n            {i}\n          </a>\n        </li>,\n      );\n    }\n\n    return pageNumbers;\n  };\n\n  return (\n    <ul className=\"pagination\">\n      <li\n        className={cn('page-item', { disabled: currentPage === 1 })}\n      >\n        <a\n          data-cy=\"prevLink\"\n          className=\"page-link\"\n          href=\"#prev\"\n          aria-disabled={currentPage === 1}\n          onClick={\n            currentPage === 1\n              ? () => 0\n              : () => handlePageChange(currentPage - 1)\n          }\n        >\n          «\n        </a>\n      </li>\n      {renderPageNumbers()}\n      <li\n        className={cn('page-item', { disabled: currentPage === totalPages })}\n      >\n        <a\n          data-cy=\"nextLink\"\n          className=\"page-link\"\n          href=\"#next\"\n          aria-disabled={currentPage === totalPages}\n          onClick={\n            currentPage === totalPages\n              ? () => 0\n              : () => handlePageChange(currentPage + 1)\n          }\n        >\n          »\n        </a>\n      </li>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nconst perPage = [3, 5, 10, 20];\n\nexport const App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage, setItemsPerPage] = useState(perPage[1]);\n\n  const onPageChange = (pageNumber = 1, itemsCount = 5) => {\n    setCurrentPage(pageNumber);\n    setItemsPerPage(itemsCount);\n  };\n\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentItems = items.slice(indexOfFirstItem, indexOfLastItem);\n\n  const onPageInfo = `Page ${currentPage} (items ${indexOfFirstItem + 1} - ${Math.min(indexOfLastItem, items.length)} of ${items.length})`;\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {onPageInfo}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={(e) => {\n              const selectedItemsPerPage = parseInt(e.target.value, 10);\n\n              setItemsPerPage(selectedItemsPerPage);\n              setCurrentPage(1);\n            }}\n            value={itemsPerPage}\n          >\n            {perPage.map((option) => (\n              <option key={option} value={option}>\n                {option}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      <Pagination\n        total={items.length}\n        perPage={itemsPerPage}\n        onPageChange={onPageChange}\n      />\n\n      <ul>\n        {currentItems.map(item => (\n          <li\n            data-cy=\"item\"\n            key={item}\n          >\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}